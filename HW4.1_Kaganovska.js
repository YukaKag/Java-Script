//Всюди JavaScript = JS

/* Task1: 'number' + 3 + 3

let result = 'number' + 3 + 3;
console.log(result);

Decision :  number33
Description: 
1. в прикладі нема пріоретизації по виконнаню тому JS буде виконувати всі дії по порядку
2.'number' JS зчитує як рядок через '..'
3. т.я перше рядок а друге цифра, а такі типи не можна обє'єднювати для виконання завданнязавдання JS змінить 
тип наступного значення теж на рядок, буде 'number3'
4. т.я і в п.3 читаючи 'number3'як рядок, при додаванні тип данних наступного значення JS теж змінить на рядок */

//====================================================================================================
/* Тask2: null + 3

let result = null + 3;
console.log(result);

Decision :  3
Description:
1.null в JS  має значення "нічого", тобто значення не існує, JS не присвоює йому відповіддно "ніякий" тип данних;
2. 3 -JS  визначає як число  і відповідно для виконання операції змінює null на тип данних число - 0;
3. виконує операцію: 0+3, виводить як результат 3.*/

//====================================================================================================
/*Task3:  5 && "qwerty"

let result = 5 && "qwerty";
console.log(result);

Decision : qwerty 
Description: 
1. в JS &&  - це оператор AND він читається з ліва на право і видає в результат перше невірне значення,
якщо невірних значень не знаходить повертає останнє, що зчитує
2. 5 точно вірне значення, число, AND  його пропускає
3. "qwerty"в кавичках, вірне значееня, текст, і т.я воно останнє - AND  нам його і видає як результат */

//====================================================================================================
/*Task 4: +'40' + +'2' + "hillel";

console.log(+'40' + +'2' + "hillel");

Decision : 42hillel
Description: 
1.в цьому виразі всі данні ('40' '2' "hillel") є текстом , але подвійні + перед '40' '2' змінюють їх на числа;
2. Т.я пріотерізації нема JS виконує послідовно: 40 змінює на число, 2 змінює на число, додає їх отримує 42;
3. в результаті попередніх дій ми отримаємо вираз 42 + "hillel", при чому 42 в нас число а "hillel" текст, 
переходячи  до наступної дії JS для вирішення задачі теж  буде змінювати тип данних 
і т.я. "hillel" змінити на число не вийде, він знову перетворить 42 на текст,в результаті отримаємо  42hillel */

//====================================================================================================
/*Task 5:  '10' - 5 === 6;

let result = "10" - 5 === 6;
console.log(result);

Decision : false
Description: 
1. Т.я пріотерізації нема JS буде виконувати завдання послідолвно з ліва на право
2. '10' в лапках це текст, 5 - число, щоб виконати завдання  JS змінить тип 10 на число, отримаємо
 вираз 10-5 з результатом 5
3. === в JS  це знак прирівнення, тобно JS зчитає: чи дорівнює 5 (результат дії п.2) 10? відповідно не дорівнює
- видасть false */

//====================================================================================================
/*Task 6:   true + false

let result = true + false
console.log (result)

Decision : 1
Description:
1.в false  + може провокувати  зміну рядків на  цифрові значення, а true false є специфічними ів булевих значеннях 
можуть бути перетворені на числа 1 і 0
2. тобто  JS  перетворить true на 1  а false на 0, додасть їх і  висть результат 1 */

//====================================================================================================
/*Task 7:  '4px' - 3

let result = '4px' - 3
console.log (result)

Decision : NaN
Description: 
JS для вирішення завданні з відніманням буде намагатися перетворити '4px' на число, т.я в запиті 
математичний оператор -  і наступне значення в нас число, але '4px' змінити на число неможливо т.я. 
воно в собі має і числа і букви, тоб то рішення   в цього вираза не буде,воно не буде числовим а для таких випадків в JS є 
 спеціальне значеення NaN - "Not-a-Number" */

 //====================================================================================================
/*Task 8: '4' - 3

let result = '4' - 3
console.log (result)

Decision : 1
Description: 
JS т.я використовується арифметичний знак - для вирішення задачі перетворить 4 з тексту , 
бо  в поки вона в лапках ''  - вона є текстом, на число  і вирішить просту арифметичну дію.*/
//====================================================================================================
/*Task 9:   '6' + 3 ** 0;

let result = '6' + 3 ** 0
console.log (result)

Decision : 61
Description: 
1. в задачі + матиматичний знак і JS  для вирішення задачі переведе текстову форму (бо
 якщо цифра в кавичках - це текст)6  в цифрову;
2. наступна частина задачі це 3**0,  в JS  ** означає введення в ступінь, тобто в цій  задачі 3 вводиця в 
ступінь 0, тобто матиматично буде 1,  результатом буде математичний простий приклад 6+1 = 61 */

//====================================================================================================
/*Task 10:  12 / '6'

let result = 12 / '6'
console.log (result)

Decision : 2
Description: в JS  + - / * - це звичайні математичні знаки при яких для вирішення завдання JS буде нагатися 
змінювати  всі данні на числа, в цьому варіанті змінить 6 як текст на 6 як цифру, в результаті ми отримаємо 
простий математичний вираз 12/6 =2  */

//====================================================================================================
/*Task 11: '10' + (5 === 6);

let result = '10' + (5 === 6);
console.log (result)

Decision : 10false
Description: 
1.в цій задачі вказано пріорітет ()  і є прирівнюючий знак ===, тобто частина (5===6) звучить як 
прирівнювання 5 до 6, це не вірно, відповідь буде false, наша задача перетвориться на : '10' + false
2. JS  використовуючи математичні знаки буде намагатися перетворити всі частини задачі на числа, але їх 
тут нема бо '10' текст  і false текст,  він зможе обєднати два текстових рядка 10 да false */

//====================================================================================================
/*Task 12: null == ''

let result = null == ''
console.log (result)

Decision : false
Description: в JS  і   null  ' '  означають пусто/нічого,  але в нас в виразі не стороге порівняння тож
значення не відповідають хоч і переводяться однаково  */

//====================================================================================================
/*Task 13: 3 ** (9 / 3);

let result = 3 ** (9 / 3)
console.log (result)

Decision : 27
Description: 
1. в цьому запиті в нас є пріорітет (9/3) = 3
2. знак ** в JS  це введення в ступінь, 3  в третій ступені буде 27  */

//====================================================================================================
/*Task 14: !!'false' == !!'true'

let result = !!'false' == !!'true'
console.log (result)

Decision : true
Description: в JS  !!  це подвійне заперечення, використання якого що в випадку 'false', що в
 випадку 'true' призведе до тих самих значень. JS що б порівняти ці значення переведи їх з
  текстового формату  в формат  булевих операторів, а вони не є однаковими  */

//====================================================================================================
/*Task 15: 0 || '0' && 1

let result = 0 || '0' && 1
console.log (result)


Decision : 1
Description: 
1. знак  ||  в JS  порівнює значення і видає перший істинний, якщо таких нема - видає останнє із значень;
2. знак  &&   в JS порівнює значення і видає перше хибне значення, якщо такого нема - видає останнє із значень; 
3. число 0 в  JS  = хибне значення, строка '0' - навпаки істина,  всі строки істина, тобто ми порівнюємо  
0 || '0' = '0'  потім  '0' && 1  в результаті ми порівнюємо істину і істину , хибних значень нема,
 то ж в результаті ця кряказябля видасть нам останній із знаків - 1 */

//====================================================================================================
/*Task 16: (+null == false) < 1

let result = (+null == false) < 1
console.log (result)

Decision :  false
Description: 
1. в цьому запиті є пріорітет по вирішенню, спочатку вирішуємо частину (+null == false), в JS + математичний
 знак який буде перетворювати на число null, а в JS  0 = хибне значення,  == не строге порівняння , 
  тоді буде в результаті прирівнюватися  негативне значення з false і знову буде 0
2. далі просте плорівняння 0 < 1, що є false*/

//====================================================================================================
/*Task 17:  false && true || true

let result = false && true || true
console.log (result)

Decision :
Description: 
1. знак  &&   в JS порівнює значення і видає перше хибне значення, якщо такого нема - видає останнє із значень,
 в нашому варіанті false && true = false ;
2. знак  ||  в JS  порівнює значення і видає перший істинний, якщо таких нема - видає останнє із значень,
 в нашому варіанті false || true  = true */

//====================================================================================================
/*Task 18:  false && (false || true)

let result = false && (false || true)
console.log (result)

Decision : false
Description: 
1.В цій задачі є пріорітет, вказаний в (), тож спочатку ми будемо вирішувати чатину (false || true), 
знак  ||  в JS  порівнює значення і видає перший істинний, якщо таких нема - видає останнє із значень,
 в нашому варіанті false || true  = true;
2.наступна частина буде виглядадти : false && true, 
знак  &&   в JS порівнює значення і видає перше хибне значення, якщо такого нема - видає останнє із значень, 
в нашому варіанті false && true = false */

//====================================================================================================
/*Task 19:  (+null == false) < 1 ** 5

let result = (+null == false) < 1 ** 5
console.log (result)

Decision :  false
Description: 
1. розділимо на частини, спочатку пріорітетна (+null == false),  + перетворить null на число 0. 
Знак ==  це прирівнення, а  0 і false рівні тож отримуємо  true.
2. в нас вишов запит:  true < 1 ** 5, JSперетворить  true на один   а 1 не є меншим від одного, отримуємо false.
3. далі false ** 5, знак ** це введення в ступінь, математично не можливо false ввести в будь-який ступінь, 
отримуємо true. */
//====================================================================================================

